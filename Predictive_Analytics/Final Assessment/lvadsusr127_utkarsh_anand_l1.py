# -*- coding: utf-8 -*-
"""LVADSUSR127-Utkarsh Anand- L1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gSXkFSrm-f0rZGwV64XiOj2klqcLRx2u
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier
from sklearn.svm import SVC
from scipy.stats import zscore
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

data=pd.read_csv("/content/sample_data/loan_approval.csv")
df=pd.DataFrame(data)
df.isnull().sum()
df.fillna(df.mean(),inplace=True)
print(df.isnull().sum())

print(df.info())
print(df.describe())
print(df.duplicated().sum())
print(df.drop_duplicates())

label_encoder=LabelEncoder()
df[' education']=label_encoder.fit_transform(df[' education'])
df[' self_employed']=label_encoder.fit_transform(df[' self_employed'])
df[' loan_status']=label_encoder.fit_transform(df[' loan_status'])
df.head()

plt.figure(figsize=(10, 6))
sns.boxplot(df)
plt.show()

threshold = 3.0
z_scores = zscore(df)
z_scores=zscore(df)
outliers = np.abs(z_scores) > threshold
df = df[~outliers]
plt.figure(figsize=(10, 6))
sns.boxplot(df)
plt.show()

print(df.corr())
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(),cmap="viridis",annot=True)
plt.show()

sns.pairplot(df,y_vars=" cibil_score")
plt.show()

X=df.iloc[:,:-1]
X.fillna(X.mean(),inplace=True)
Y=df.iloc[:,-1]
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=42)
model1=DecisionTreeClassifier()
model1.fit(X_train,Y_train)
pred1=model1.predict(X_test)
acc1=accuracy_score(pred1,Y_test)
print(acc1)
precision1=precision_score(pred1,Y_test,average='weighted')
print(precision1)
recall1=recall_score(pred1,Y_test,average="weighted")
print(recall1)

model2=RandomForestClassifier()
model2.fit(X_train,Y_train)
pred2=model2.predict(X_test)
acc2=accuracy_score(pred2,Y_test)
print(acc2)
precision2=precision_score(pred2,Y_test,average='weighted')
print(precision2)
recall2=recall_score(pred2,Y_test,average="weighted")
print(recall2)