# -*- coding: utf-8 -*-
"""UTKARSH ANAND LAB 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d7XNL_HwWgprlDIdnueBZXxNcJVJMVFc
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import accuracy_score


data=pd.read_csv("/content/sample_data/Mall_Customers.csv")
df=pd.DataFrame(data)
print(df.head())
df.isnull().sum()

df.fillna(value=0, inplace=True)
df.isnull().sum()

import matplotlib.pyplot as plt
import seaborn as sns
print(df.duplicated().sum())
print(df.drop_duplicates())
print(df.info())
print(df.describe())

label_encoder=LabelEncoder()
df['Gender']=label_encoder.fit_transform(df['Gender'])
plt.figure(figsize=(10, 6))
sns.boxplot(df)
plt.show()

from scipy.stats import zscore
threshold = 3.0
z_scores = zscore(df)
z_scores=zscore(df)
outliers = np.abs(z_scores) > threshold
df = df[~outliers]
plt.figure(figsize=(10, 6))
sns.boxplot(df)
plt.show()

sns.pairplot(df,y_vars=['Gender'])
plt.show()
print(df.corr())
sns.heatmap(df.corr(),cmap="jet",annot=True)
plt.show()

X = data[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].values
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Choose the number of clusters
k = 5

# Train the KMeans model
kmeans = KMeans(n_clusters=k)
kmeans.fit(X_scaled)

# Add cluster labels to the original data
data['Cluster'] = kmeans.labels_

# Visualize the clusters
plt.scatter(data['Annual Income (k$)'], data['Spending Score (1-100)'], c=data['Cluster'], cmap='viridis', alpha=0.5)
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.title('Customer Segmentation')
plt.show()



import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(df)
    wcss.append(kmeans.inertia_)

# Plot the elbow curve
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

kmeans = KMeans(n_clusters=k)
kmeans.fit(X_scaled)

data['Cluster'] = kmeans.labels_

centroids = scaler.inverse_transform(kmeans.cluster_centers_)

plt.figure(figsize=(8, 6))

for cluster in range(k):
    cluster_data = data[data['Cluster'] == cluster]
    plt.scatter(cluster_data['Annual Income (k$)'], cluster_data['Spending Score (1-100)'],
                label=f'Cluster {cluster}', alpha=0.6)

plt.scatter(centroids[:, 0], centroids[:, 1], marker='*', s=300, c='red', label='Centroids')

plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.title('Customer Segmentation with K-Means Clustering')
plt.legend()
plt.grid(True)
plt.show()