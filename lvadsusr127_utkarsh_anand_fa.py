# -*- coding: utf-8 -*-
"""LVADSUSR127-UTKARSH ANAND_FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RaLOsKpa-thiwPk1qy3iyOfn5AhdYKR7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#1
data=pd.read_excel('/content/sample_data/Walmart_Dataset Python_Final_Assessment.xlsx')
df=pd.DataFrame(data)
print(df.info())
print(df.describe())
print(df.to_string())

#2
print(df.isnull().sum())
df.drop_duplicates(inplace=True)

# 3
print("Mean_sales \n", df['Sales'].mean())
print("Median_sales \n", df['Sales'].median())
print("Mode_Sales \n", df['Sales'].mode())
print("Range_Sales \n", df['Sales'].max() - df['Sales'].min())
print("Variance_Sales \n", df['Sales'].var())
print("Standard Deviation_Sales \n", df['Sales'].std())
print("Mean_Quantity \n", df['Quantity'].mean())
print("Median_Quantity \n", df['Quantity'].median())
print("Mode_Quantity \n", df['Quantity'].mode())
print("Range_Quantity \n", df['Quantity'].max() - df['Quantity'].min())
print("Variance_Quantity \n", df['Quantity'].var())
print("Standard Deviation_Quantity \n", df['Quantity'].std())
print("Mean_Profit \n", df['Profit'].mean())
print("Median_Profit \n", df['Profit'].median())
print("Mode_Profit \n", df['Profit'].mode())
print("Range_Profit \n", df['Profit'].max() - df['Profit'].min())
print("Variance_Profit \n", df['Profit'].var())
print("Standard Deviation_Profit \n", df['Profit'].std())

#4
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Ship Date'] = pd.to_datetime(df['Ship Date'])
df['Order Year'] = pd.to_datetime(df['Order Date']).dt.year


salesData = df.groupby('Order Year')['Sales'].sum()
salesData.plot(label='Sales')
profitData = df.groupby('Order Year')['Profit'].sum()
profitData.plot(label='Profit')
plt.grid(True)
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='Category', y='Sales', data=df)
plt.title('Sales-Category')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Quantity', y='Profit', data=df)
plt.title('Profit vs Quantity')
plt.xlabel('Quantity')
plt.ylabel('Profit')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='Profit', data=df)
plt.title('Profit-Dist')
plt.xlabel('Profit')
plt.tight_layout()
plt.show()

# 5
correlation_matrix = df.corr()
print(correlation_matrix)

#6
numeric_cols = ['Sales', 'Quantity', 'Profit']
df_zscores = df[numeric_cols].apply(lambda x: np.abs((x - x.mean()) / x.std()))

outliers = df_zscores > 3

outliers_data = df[outliers.any(axis=1)]

print("Outliers:")
print(outliers_data)

plt.figure(figsize=(10, 6))
sns.boxplot(data=df[numeric_cols])
plt.title('Boxplot of Sales, Quantity, and Profit')
plt.xlabel('Features')
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#7
#Trend Analysis
# i
df['Order Month'] = pd.to_datetime(df['Order Date']).dt.month
salesData = df.groupby('Order Year')['Sales'].sum()
salesData.plot(label='Sales')
profitData = df.groupby('Order Year')['Profit'].sum()
profitData.plot(label='Profit')
plt.legend()
plt.show()

salesData = df.groupby('Order Month')['Sales'].sum()
salesData.plot(label='Sales')
profitData = df.groupby('Order Month')['Profit'].sum()
profitData.plot(label='Profit')
plt.legend()
plt.show()

# ii
total_sales = df.groupby(['Order Year', 'Category'])['Sales'].sum().reset_index()
total_sales['Growth'] = total_sales.groupby('Category')['Sales'].pct_change() * 100
most_growth_category = total_sales.groupby('Category')['Growth'].mean().idxmax()
print("Category with the Most Growth in Sales:", most_growth_category)

# customer Analysis
#i
customer_summary = df.groupby('EmailID').agg({'Order ID': 'nunique', 'Sales': 'sum'}).reset_index()
customer_summary.columns = ['EmailID', 'Quantity', 'TotalSales']

top_orders = customer_summary.nlargest(5, 'Quantity')
top_sales = customer_summary.nlargest(5, 'TotalSales')

print("Top 5 Customers by Orders Placed:")
print(top_orders.set_index('EmailID'))
print("\nTop 5 Customers by Total Sales:")
print(top_sales.set_index('EmailID'))

# ii

df['OrderDate'] = pd.to_datetime(df['Order Date'])
df.sort_values(by=['EmailID', 'Order Date'], inplace=True)
df['Time_Between_Orders'] = df.groupby('EmailID')['Order Date'].diff()
average_time = df.groupby('EmailID')['Time_Between_Orders'].mean()

print("Average Time:")
print(average_time)
print(average_time.mean())

# Comprehensive Analysis
df['TimeBetweenOrderAndDelivery'] = df['Ship Date'] - df['Order Date']
average_time_between_order_and_delivery = df.groupby('Category')['TimeBetweenOrderAndDelivery'].mean()
print(average_time_between_order_and_delivery)

df['TimeBetweenOrderAndDelivery'] = df['Ship Date'] - df['Order Date']
average_time_between_order_and_delivery = df.groupby('EmailID')['TimeBetweenOrderAndDelivery'].mean()
print(average_time_between_order_and_delivery.mean())

"""i)  Bigger trucks can be used to optimised organisation of transporters to improve the supply chain.As of now the average time taken for the shipment of an order is 8 days and 20 hours.It stands highest for Tables delivery .

ii)  Insights from these factors can inform targeted marketing by enabling businesses to tailor products, pricing, promotions, and advertising strategies to specific regions, demographics, and consumer behaviors thus improving sales performance and customer engagement.
The geographic distribution of sales is influenced by factors such as age, income, cultural preferences, economic conditions and local requirements.
"""

customer_order_amounts = df.groupby('EmailID')['Sales'].sum().reset_index()

top_10 = int(len(customer_order_amounts) * 0.1)
high_value_customers = customer_order_amounts.nlargest(top_10, 'Sales')
print(high_value_customers)

customer_order_amounts = df.groupby('EmailID')['Quantity'].sum().reset_index()

top_10= int(len(customer_order_amounts) * 0.1)
high_value_customers = customer_order_amounts.nlargest(top_10, 'Quantity')
print(high_value_customers)

for index, customer in high_value_customers.iterrows():
  pass
  #We can write a function to send promotional offers to these value customers

"""iii)  These customers can be given additional promotions and offers to enhance customer loyalty and they are more likely to recommend wallmart to other potential customers.High value customers can be identified by their purchasing quantity, purchase frequency and pruchase amount ."""